<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="alpha.theme">
<body>
<metal:content-core fill-slot="body">
  <article id="content">
<!-- style css -->
<link rel="stylesheet" href="++theme++alpha.theme/css/style.css">

<style>
  * {
    box-sizing: border-box;
  }

  body {
    background-color: #f1f1f1;
  }

  #regForm {
    background-color: #ffffff;
    font-family: Raleway;
    margin: auto;
    width: 80%;
    overflow: hidden;
  }

  h1 {
    text-align: center;  
  }

  input {
    padding: 10px;
    width: 100%;
    font-size: 17px;
    font-family: Raleway;
    border: 1px solid #aaaaaa;
  }

  /* Mark input boxes that gets an error on validation: */
  input.invalid {
    background-color: #ffdddd;
  }

  /* Hide all steps by default: */
  .tab {
    display: none;
  }

  button {
    background-color: #4CAF50;
    color: #ffffff;
    border: none;
    padding: 10px 20px;
    font-size: 17px;
    font-family: Raleway;
    cursor: pointer;
  }

  button:hover {
    opacity: 0.8;
  }

  #prevBtn {
    background-color: #bbbbbb;
  }

  /* Make circles that indicate the steps of the form: */
  .step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbbbbb;
    border: none;  
    border-radius: 50%;
    display: inline-block;
    opacity: 0.5;
  }

  .step.active {
    opacity: 1;
  }

  /* Mark the steps that are finished and valid: */
  .step.finish {
    background-color: #4CAF50;
  }
</style>
      <form id="regForm" method="POST" action="${context/portal_url}/new_user_form">
        <div class="login-title text-center mb-30">
          <h2 class="title" i18n:translate="">Register</h2>
        </div>
        <!-- One "tab" for each step in the form: -->
        <div class="tab">
          <div>
            <div class="single-register">
              <label for="username"><span i18n:translate="">Username</span><span class="must">*</span></label>
              <input type="text" name="username" id="username"
                     oninput="this.className = '';this.setCustomValidity('');" onblur="checkUsername()" required/>
            </div>
          </div>
          <div>
            <div class="single-register">
              <label for="password"><span i18n:translate="">Password</span><span class="must">*</span></label>
              <input type="password" name="password" id="password" pattern="[a-zA-Z0-9]{6,}" 
                     oninput="this.className = '';this.setCustomValidity('');" onkeyup="validatePassword()" 
                     oninvalid="this.setCustomValidity('${view/pwVaild}');" required/>
            </div>
          </div>
          <div>
            <div class="single-register">
              <label for="re_password"><span i18n:translate="">Confirm Password</span><span class="must">*</span></label>
              <input type="password" id="re_password"
                     oninput="this.className = ''" onkeyup="validatePassword()" required/>
            </div>
          </div>
        </div>
        <div class="tab">
          <div>
            <div class="single-register">
              <label for="email"><span i18n:translate="">Email Address</span><span class="must">*</span></label>
              <input type="email" name="email" id="email" oninput="this.className = ''" required />
            </div>
          </div>
          <div>
            <div class="single-register">
              <label for="telephone"><span i18n:translate="">Telephone</span><span class="must">*</span></label>
              <input type="text" name="telephone" id="telephone" oninput="this.className = ''" required/>
            </div>
          </div>
          <div>
            <div class="single-register">
              <label for="fax" i18n:translate="">Fax</label>
              <input type="text" name="fax" id="fax" oninput="this.className = ''" />
            </div>
          </div>
        </div>
        <div class="tab">
          <div>
            <div class="single-register">
              <label for="fName"><span i18n:translate="">First Name</span><span class="must">*</span></label>
              <input type="text" name="fName" id="fName" oninput="this.className = ''" required/>
            </div>
          </div>
          <div>
            <div class="single-register">
              <label for="lName"><span i18n:translate="">Last Name</span><span class="must">*</span></label>
              <input type="text" name="lName" id="lName" oninput="this.className = ''" required/>
            </div>
          </div>
        </div>
        <div class="tab">
          <div class="single-register">
            <label for="company" i18n:translate="">Company</label>
            <input type="text" name="company" id="company" oninput="this.className = ''" />
          </div>
          <div class="single-register">
            <label for="address1"><span i18n:translate="">Address1</span><span class="must">*</span></label>
            <input type="text" name="address1" id="address1" oninput="this.className = ''" required />
          </div>
          <div class="single-register">
            <label for="address2" i18n:translate="">Address2</label>
            <input type="text" name="address2" id="address2" oninput="this.className = ''" />
          </div>
          <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
              <div class="single-register">
                <label for="city"><span i18n:translate="">Town/City</span><span class="must">*</span></label>
                <input type="text" name="city" id="city" oninput="this.className = ''" required />
              </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
              <div class="single-register">
                <label for="zip"><span i18n:translate="">Postcode/zip</span><span class="must">*</span></label>
                <input type="text" name="zip" id="zip" oninput="this.className = ''" required />
              </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
              <div class="single-register">
                <label for="country"><span i18n:translate="">Country</span><span class="must">*</span></label>
                <select class="form-control" name="country" id="country" required>
                  <option value="C2" i18n:translate="">CHINA</option>
                  <option value="US" i18n:translate="">USA</option>
                </select>
              </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
              <div class="single-register">
                <label for="state"><span i18n:translate="">State</span><span class="must">*</span></label>
                <input type="text" name="state" id="state" oninput="this.className = ''" required/>
              </div>
            </div>
          </div>
        </div>
        <div class="tab" tal:condition="view/checkAdmin">
          <div class="single-register">
            <label i18n:translate="">promoCode</label>
            <input type="text" name="promoCode" id="promoCode"
                   oninput="this.className = '';this.setCustomValidity('');" onblur="checkPromoCode()" />
          </div>
          <div class="single-register" tal:condition="view/checkAdmin">
            <label i18n:translate="">group</label>
            <select class="form-control" name="group" id="group">
              <option value="level_D" i18n:translate="">level_D</option>
              <option value="level_C" i18n:translate="">level_C</option>
              <option value="level_B" i18n:translate="">level_B</option>
              <option value="level_A" i18n:translate="">level_A</option>
            </select>
          </div>
        </div>
        <div style="overflow:auto;">
          <div style="float:right;">
            <input type="hidden" name="widget-form-btn" value="widget-form-btn"/>
            <button type="button" id="prevBtn" onclick="nextPrev(-1)" i18n:translate="">Previous</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)" i18n:translate="">Next</button>
            <button type="submit" id="submitBtn" onclick="nextPrev(1)"  i18n:translate="">Submit</button>
          </div>
        </div>
        <!-- Circles which indicates the steps of the form: -->
        <div style="text-align:center;margin-top:40px;">
          <span class="step"></span>
          <span class="step"></span>
          <span class="step"></span>
          <span class="step"></span>
          <span class="step" tal:condition="view/checkAdmin"></span>
        </div>
      </form>

      <script>
        window.onkeydown =  function() {
          var keyCode = event.keyCode || event.which;
          if (keyCode === 13) { 
            event.preventDefault();
            return false;
          }
        };

        document.getElementById("regForm").addEventListener("keydown", function() {
          var keyCode = event.keyCode || event.which;
          if (keyCode === 13) { 
            event.preventDefault();
            return false;
          }
        });

      </script>

      <script>
        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the crurrent tab

        function showTab(n) {
          // This function will display the specified tab of the form...
          var x = document.getElementsByClassName("tab");
          x[n].style.display = "block";
          //... and fix the Previous/Next buttons:
          if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
          } else {
            document.getElementById("prevBtn").style.display = "inline";
          }
          if (n == (x.length - 1)) {
            document.getElementById("nextBtn").style.display = "none";
            document.getElementById("submitBtn").style.display = "inline";
          } else {
            document.getElementById("nextBtn").style.display = "inline";
            document.getElementById("submitBtn").style.display = "none";
          }
          //... and run a function that will display the correct step indicator:
          fixStepIndicator(n)
        }

        function nextPrev(n) {
          // This function will figure out which tab to display
          var x = document.getElementsByClassName("tab");
          // Exit the function if any field in the current tab is invalid:
          if (n == 1 && !validateForm()) return false;
          // Hide the current tab:
          x[currentTab].style.display = "none";
          // Increase or decrease the current tab by 1:
          currentTab = currentTab + n;
          // Otherwise, display the correct tab:
          showTab(currentTab);
        }

        function validateForm() {
          // This function deals with validation of the form fields
          var x, y, i, valid = true;
          x = document.getElementsByClassName("tab");
          y = x[currentTab].getElementsByTagName("input");
          // A loop that checks every input field in the current tab:
          for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (!y[i].checkValidity() || (y[i].required && y[i].value == "")) {
              // add an "invalid" class to the field:
              y[i].className += " invalid";
              document.getElementById("submitBtn").click();
              // and set the current valid status to false
              valid = false;
            }
          }
          // If the valid status is true, mark the step as finished and valid:
          if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
          }
          return valid; // return the valid status
        }

        function fixStepIndicator(n) {
          // This function removes the "active" class of all steps...
          var i, x = document.getElementsByClassName("step");
          for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
          }
          //... and adds the "active" class on the current step:
          x[n].className += " active";
        }

        function validatePassword(){
          var password = document.getElementById("password")
            , confirm_password = document.getElementById("re_password");
          if(password.value != confirm_password.value) {
            confirm_password.setCustomValidity("${view/pwConfirm}");
          } else {
            confirm_password.setCustomValidity('');
          }
        }
      </script>

      <script>
        function checkUsername(){
          var username = event.target.value;
          var form = new FormData(this);
          form.append("username", username);
          $.ajax({
              method: "POST",
              url: "${context/portal_url}/new_user_form",
              processData: false,
              contentType: false,
              mimeType: "multipart/form-data",
              data: form,
          }).done(function(response) {
              if(response == "1"){
                  document.getElementById("username").setCustomValidity("");
              }else{
                  document.getElementById("username").setCustomValidity("${view/userConfirmStr}");
              }
          }); 
        }

        function checkPromoCode(){
          var promoCode = event.target.value;
          var form = new FormData(this);
          if(promoCode){
            form.append("promoCode", promoCode);
            $.ajax({
                method: "POST",
                url: "${context/portal_url}/new_user_form",
                processData: false,
                contentType: false,
                mimeType: "multipart/form-data",
                data: form,
            }).done(function(response) {
                if(response == "1"){
                    document.getElementById("promoCode").setCustomValidity("");
                }else{
                    document.getElementById("promoCode").setCustomValidity("${view/promoCodeStr}");
                }
            }); 
          }else{
            document.getElementById("promoCode").setCustomValidity("");
          }
        }

      </script>
  </article>
</metal:content-core>
</body>
</html>
